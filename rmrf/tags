!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FDF_H	fdf.h	/^# define FDF_H$/;"	d
KEY_A	fdf.h	/^# define KEY_A /;"	d
KEY_D	fdf.h	/^# define KEY_D /;"	d
KEY_DOWN	fdf.h	/^# define KEY_DOWN /;"	d
KEY_E	fdf.h	/^# define KEY_E /;"	d
KEY_ESC	fdf.h	/^# define KEY_ESC /;"	d
KEY_LEFT	fdf.h	/^# define KEY_LEFT /;"	d
KEY_Q	fdf.h	/^# define KEY_Q /;"	d
KEY_R	fdf.h	/^# define KEY_R /;"	d
KEY_RIGHT	fdf.h	/^# define KEY_RIGHT /;"	d
KEY_S	fdf.h	/^# define KEY_S /;"	d
KEY_UP	fdf.h	/^# define KEY_UP /;"	d
KEY_W	fdf.h	/^# define KEY_W /;"	d
PI	fdf.h	/^# define PI /;"	d
X_EVENT_KEY_PRESS	fdf.h	/^#define X_EVENT_KEY_PRESS /;"	d
angle	fdf.h	/^	double	angle;$/;"	m	struct:s_handler
bresenham	fdf.c	/^void	bresenham(int start_x, int start_y, int finish_x, int finish_y, t_mlx mlx)$/;"	f
bresenham_x	fdf.c	/^void	bresenham_x(int start_x, int start_y, int finish_x, int finish_y, t_mlx mlx)$/;"	f
bresenham_y	fdf.c	/^void	bresenham_y(int start_x, int start_y, int finish_x, int finish_y, t_mlx mlx)$/;"	f
create_points	utils2.c	/^t_point	**create_points(t_map *map)$/;"	f
delta_x	fdf.h	/^	int		delta_x;$/;"	m	struct:s_handler
delta_y	fdf.h	/^	int		delta_y;$/;"	m	struct:s_handler
ft_check_args	utils.c	/^void	ft_check_args(int argc, char **argv)$/;"	f
ft_error	utils.c	/^void	ft_error(char *str)$/;"	f
ft_isometric	isometric.c	/^void	ft_isometric(double *x, double *y, int z)$/;"	f
ft_open_file	utils.c	/^int	ft_open_file(char *file_name)$/;"	f
ft_word_count	ft_word_count.c	/^size_t	ft_word_count(char const *s, char const *set)$/;"	f
get_one_line	utils2.c	/^void	get_one_line(t_point *point, int y, char *a_line, int width)$/;"	f
handler	fdf.h	/^	t_handler	handler;$/;"	m	struct:s_mlx
height	fdf.h	/^	int	height;$/;"	m	struct:s_map
img	fdf.h	/^	void		*img;$/;"	m	struct:s_mlx
is_set	ft_word_count.c	/^int	is_set(char c, char const *set)$/;"	f
iso_x	fdf.h	/^	double	iso_x;$/;"	m	struct:s_point
iso_y	fdf.h	/^	double	iso_y;$/;"	m	struct:s_point
key_press	fdf.c	/^int	key_press(int keycode, t_mlx *mlx)$/;"	f
main	fdf.c	/^int	main(int argc, char **argv)$/;"	f
main_loop	fdf.c	/^int	main_loop(t_all all)$/;"	f
make_points	utils2.c	/^t_point	**make_points(t_map *map, char *file_name)$/;"	f
map	fdf.h	/^	t_map		*map;$/;"	m	struct:s_all
mlx	fdf.h	/^	t_mlx		*mlx;$/;"	m	struct:s_all
mlx	fdf.h	/^	void		*mlx;$/;"	m	struct:s_mlx
point	fdf.h	/^	t_point		***point;$/;"	m	struct:s_all
rec_checker	utils.c	/^t_map	rec_checker(char *file_name)$/;"	f
rotate_x	fdf.c	/^static void	rotate_x(int *y, int *z, double angle)$/;"	f	file:
rotate_y	fdf.c	/^static void	rotate_y(int *x, int *z, double angle)$/;"	f	file:
rotate_z	fdf.c	/^static void	rotate_z(int *x, int *y, double angle)$/;"	f	file:
s_all	fdf.h	/^typedef struct	s_all$/;"	s
s_handler	fdf.h	/^typedef struct	s_handler$/;"	s
s_map	fdf.h	/^typedef struct	s_map$/;"	s
s_mlx	fdf.h	/^typedef struct	s_mlx$/;"	s
s_point	fdf.h	/^typedef struct	s_point$/;"	s
scale	fdf.h	/^	double	scale;$/;"	m	struct:s_handler
set_mlx	fdf.c	/^void	set_mlx(t_mlx *mlx, t_map *map)$/;"	f
t_all	fdf.h	/^}	t_all;$/;"	t	typeref:struct:s_all
t_handler	fdf.h	/^}	t_handler;$/;"	t	typeref:struct:s_handler
t_map	fdf.h	/^}	t_map;$/;"	t	typeref:struct:s_map
t_mlx	fdf.h	/^}	t_mlx;$/;"	t	typeref:struct:s_mlx
t_point	fdf.h	/^}	t_point;$/;"	t	typeref:struct:s_point
width	fdf.h	/^	int	width;$/;"	m	struct:s_map
win	fdf.h	/^	void		*win;$/;"	m	struct:s_mlx
z	fdf.h	/^	int		z;$/;"	m	struct:s_point
